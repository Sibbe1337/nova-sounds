<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="3" time="0.020" timestamp="2025-03-21T17:18:57.540020+01:00" hostname="MacBook-Pro.local"><testcase classname="test_presets" name="test_list_presets" time="0.001"><failure message="AttributeError: RMS_ENERGY">def test_list_presets():
        """Test listing all available presets."""
        print("\n== Testing List Presets ==")
        preset_manager = get_preset_manager()
&gt;       all_presets = preset_manager.list_all_presets()

test_presets.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
src/app/services/video/music_responsive/presets.py:352: in list_all_presets
    config = self.get_preset_config(preset)
src/app/services/video/music_responsive/presets.py:109: in get_preset_config
    "VignetteEffect": MusicFeature.RMS_ENERGY.name
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

cls = &lt;enum 'MusicFeature'&gt;, name = 'RMS_ENERGY'

    def __getattr__(cls, name):
        """
        Return the enum member matching `name`
    
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        if _is_dunder(name):
            raise AttributeError(name)
        try:
            return cls._member_map_[name]
        except KeyError:
&gt;           raise AttributeError(name) from None
E           AttributeError: RMS_ENERGY

/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/enum.py:429: AttributeError</failure></testcase><testcase classname="test_presets" name="test_custom_preset" time="0.001" /><testcase classname="test_presets" name="test_generate_videos_with_presets" time="0.000" /></testsuite></testsuites>