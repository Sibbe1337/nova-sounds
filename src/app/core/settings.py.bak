"""
Application settings for YouTube Shorts Machine.
"""
import os
import logging
from typing import Dict, Any, Optional
from dotenv import load_dotenv

# Load environment variables from .env file
try:
    load_dotenv()
    logging.info("Loaded environment variables from .env")
except Exception as e:
    logging.error(f"Error loading environment variables: {e}")

# Development mode flag (set to False for production)
DEV_MODE = os.environ.get('DEV_MODE', 'true').lower() in ('true', '1', 't')

# Debug mode flag (set to False for production)
DEBUG_MODE = os.environ.get('DEBUG_MODE', 'true').lower() in ('true', '1', 't')

# Environment settings
ENV = os.environ.get("ENV", "development").lower()

# Determine if we're in development, staging, or production
is_development = ENV == "development"
is_staging = ENV == "staging"
is_production = ENV == "production"

# API keys and credentials
GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")
GOOGLE_APPLICATION_CREDENTIALS = os.environ.get("GOOGLE_APPLICATION_CREDENTIALS")
RUNWAY_ML_API_KEY = os.environ.get("RUNWAY_ML_API_KEY")

# Log settings at startup
if is_development:
    logging.info("Running in DEVELOPMENT mode")
elif is_staging:
    logging.info("Running in STAGING mode")
elif is_production:
    logging.info("Running in PRODUCTION mode")

# Log additional debug info
if DEBUG_MODE:
    logging.info("DEBUG MODE enabled - detailed logging and additional debug features activated")

# Log API key availability
if GOOGLE_API_KEY:
    logging.info("Google API key is configured")
else:
    logging.warning("Google API key is not configured")

if GOOGLE_APPLICATION_CREDENTIALS:
    logging.info("Google Application Credentials are configured")
else:
    logging.warning("Google Application Credentials are not configured")

if RUNWAY_ML_API_KEY:
    logging.info("Runway ML API key is configured")
else:
    logging.warning("Runway ML API key is not configured")

# Development mode settings
DEV_SETTINGS = {
    "MOCK_GCS": True,
    "MOCK_YOUTUBE": True,
    "MOCK_FIRESTORE": True,
    "MOCK_CELERY": True,
}

# List of required environment variables for production mode
REQUIRED_ENV_VARS = {
    "GOOGLE_APPLICATION_CREDENTIALS": "Path to Google Cloud service account key",
    "GCS_BUCKET_NAME": "Name of the Google Cloud Storage bucket for music",
    "GCS_VIDEO_BUCKET": "Name of the Google Cloud Storage bucket for videos",
}

def validate_env_vars() -> bool:
    """
    Validate that all required environment variables are set.
    
    Returns:
        bool: True if all required variables are set, False otherwise
    """
    if DEV_MODE:
        return True
        
    missing_vars = []
    for var, description in REQUIRED_ENV_VARS.items():
        if not os.environ.get(var):
            missing_vars.append(f"{var}: {description}")
    
    if missing_vars:
        logging.warning("Missing required environment variables:")
        for var in missing_vars:
            logging.warning(f"  - {var}")
        return False
    
    return True

def get_setting(key: str) -> Any:
    """
    Get a setting value, respecting development mode.
    
    Args:
        key: The setting key to retrieve
        
    Returns:
        Any: The setting value
    """
    if DEV_MODE and key in DEV_SETTINGS:
        return DEV_SETTINGS[key]
    return os.environ.get(key)

# Validate environment variables on module load
if not DEV_MODE and not validate_env_vars():
    logging.warning("Some required environment variables are missing. Falling back to development mode.")
    DEV_MODE = True

# API Configuration
API_HOST = os.environ.get('API_HOST', '0.0.0.0')
API_PORT = int(os.environ.get('API_PORT', '8000'))
API_TITLE = "YouTube Shorts Machine API"
API_DESCRIPTION = "API for generating and distributing music-responsive videos with advanced optimization features"
API_VERSION = "1.1.0"

# UI Configuration
UI_HOST = os.environ.get('UI_HOST', '0.0.0.0')
UI_PORT = int(os.environ.get('UI_PORT', '8001'))

# Google Cloud Storage
GCS_BUCKET_NAME = os.environ.get("GCS_BUCKET_NAME", "youtubeshorts123")
GCS_VIDEO_BUCKET = os.environ.get("GCS_VIDEO_BUCKET", "youtubeshorts123")
GCS_MUSIC_BUCKET = os.environ.get('GCS_MUSIC_BUCKET', 'youtube-shorts-music')
GCS_OUTPUT_BUCKET = os.environ.get('GCS_OUTPUT_BUCKET', 'youtube-shorts-output')
GCS_SERVICE_ACCOUNT_KEY = os.environ.get('GCS_SERVICE_ACCOUNT_KEY', 'service-account-key.json')

# YouTube API
YOUTUBE_CLIENT_ID = os.environ.get("YOUTUBE_CLIENT_ID")
YOUTUBE_CLIENT_SECRET = os.environ.get("YOUTUBE_CLIENT_SECRET", "client_secret.json")
YOUTUBE_TOKEN_CACHE = os.environ.get('YOUTUBE_TOKEN_CACHE', '.youtube_tokens')

# Redis Configuration
REDIS_URL = os.environ.get("REDIS_URL", "redis://localhost:6379/0")

# Runway ML API
os.environ['RUNWAY_API_KEY'] = 'key_57357283b4aa55c5d4a8c0db8652317613c60ada603a5e8ae5da013d71c3abfd9daca973b631d26eb4e74a6c0c5216ba2cf94dd2c2f3155d71ed167f0fdf46b1'  # Added by debug script
os.environ['RUNWAY_API_KEY'] = 'key_57357283b4aa55c5d4a8c0db8652317613c60ada603a5e8ae5da013d71c3abfd9daca973b631d26eb4e74a6c0c5216ba2cf94dd2c2f3155d71ed167f0fdf46b1'  # Added by debug script
RUNWAY_API_KEY = os.environ.get("RUNWAY_API_KEY", "")if RUNWAY_API_KEY:
    logging.info("Runway ML API key is configured")
else:
    logging.warning("Runway ML API key is not configured - some features will be limited")

# Thumbnail optimization settings
THUMBNAIL_STORAGE_DIR = os.environ.get('THUMBNAIL_STORAGE_DIR', os.path.join(os.path.dirname(__file__), '..', '..', '..', 'thumbnails'))

# Social media settings
SOCIAL_CONFIG_DIR = os.environ.get('SOCIAL_CONFIG_DIR', os.path.join(os.path.dirname(__file__), '..', 'services', 'social', 'config'))

# Scheduler settings
SCHEDULER_DATA_DIR = os.environ.get('SCHEDULER_DATA_DIR', os.path.join(os.path.dirname(__file__), '..', 'services', 'data'))
SCHEDULER_BATCH_DIR = os.environ.get('SCHEDULER_BATCH_DIR', os.path.join(SCHEDULER_DATA_DIR, 'batches'))

# Create necessary directories
os.makedirs(THUMBNAIL_STORAGE_DIR, exist_ok=True)
os.makedirs(SOCIAL_CONFIG_DIR, exist_ok=True)
os.makedirs(SCHEDULER_BATCH_DIR, exist_ok=True)

def get_settings() -> Dict[str, Any]:
    """
    Get all settings as a dictionary.
    
    Returns:
        Dict containing all settings
    """
    return {
        "dev_mode": DEV_MODE,
        "debug_mode": DEBUG_MODE,
        "api_host": API_HOST,
        "api_port": API_PORT,
        "ui_host": UI_HOST,
        "ui_port": UI_PORT,
        "gcs_bucket_name": GCS_BUCKET_NAME,
        "gcs_video_bucket": GCS_VIDEO_BUCKET,
        "google_application_credentials": GOOGLE_APPLICATION_CREDENTIALS,
        "youtube_client_id": YOUTUBE_CLIENT_ID,
        "youtube_client_secret": YOUTUBE_CLIENT_SECRET,
os.environ['RUNWAY_API_KEY'] = 'key_57357283b4aa55c5d4a8c0db8652317613c60ada603a5e8ae5da013d71c3abfd9daca973b631d26eb4e74a6c0c5216ba2cf94dd2c2f3155d71ed167f0fdf46b1'  # Added by debug script
        "client_secrets_file": YOUTUBE_TOKEN_CACHE,
        "redis_url": REDIS_URL,
        "runway_api_key": bool(RUNWAY_API_KEY),  # Only return whether it's set, not the actual key
        "gcs_music_bucket": GCS_MUSIC_BUCKET,
        "gcs_output_bucket": GCS_OUTPUT_BUCKET,
        "gcs_service_account_key": GCS_SERVICE_ACCOUNT_KEY,
        "api_title": API_TITLE,
        "api_description": API_DESCRIPTION,
        "api_version": API_VERSION,
        "thumbnail_storage_dir": THUMBNAIL_STORAGE_DIR,
        "social_config_dir": SOCIAL_CONFIG_DIR,
        "scheduler_data_dir": SCHEDULER_DATA_DIR,
        "scheduler_batch_dir": SCHEDULER_BATCH_DIR,
    } 